// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.3
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="triInsertion,hls_ip_2017_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100tcsg324-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.913750,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=131,HLS_SYN_LUT=223}" *)

module triInsertion (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_address0,
        data_ce0,
        data_we0,
        data_d0,
        data_q0,
        len
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] data_address0;
output   data_ce0;
output   data_we0;
output  [31:0] data_d0;
input  [31:0] data_q0;
input  [31:0] len;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[2:0] data_address0;
reg data_ce0;
reg data_we0;
reg[31:0] data_d0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_fu_94_p2;
reg   [31:0] v_reg_155;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_2_fu_104_p2;
reg   [0:0] tmp_2_reg_161;
wire    ap_CS_fsm_state4;
wire   [30:0] j_1_fu_110_p2;
reg   [30:0] j_1_reg_165;
wire   [30:0] i_fu_136_p2;
wire    ap_CS_fsm_state5;
wire   [0:0] tmp_5_fu_121_p2;
reg   [30:0] j_reg_67;
reg   [30:0] j1_reg_79;
wire   [63:0] tmp_1_fu_99_p1;
wire   [63:0] tmp_4_fu_116_p1;
wire   [63:0] tmp_8_fu_126_p1;
wire   [63:0] tmp_6_fu_131_p1;
wire   [31:0] j_cast_fu_90_p1;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_reg_161 == 1'd0) & (1'd1 == tmp_5_fu_121_p2) & (1'b1 == ap_CS_fsm_state5))) begin
        j1_reg_79 <= j_1_reg_165;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        j1_reg_79 <= j_reg_67;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & ((1'd0 == tmp_5_fu_121_p2) | (1'd1 == tmp_2_reg_161)))) begin
        j_reg_67 <= i_fu_136_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_reg_67 <= 31'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_fu_104_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        j_1_reg_165 <= j_1_fu_110_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_2_reg_161 <= tmp_2_fu_104_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        v_reg_155 <= data_q0;
    end
end

always @ (*) begin
    if (((tmp_fu_94_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_94_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & ((1'd0 == tmp_5_fu_121_p2) | (1'd1 == tmp_2_reg_161)))) begin
        data_address0 = tmp_6_fu_131_p1;
    end else if (((tmp_2_reg_161 == 1'd0) & (1'd1 == tmp_5_fu_121_p2) & (1'b1 == ap_CS_fsm_state5))) begin
        data_address0 = tmp_8_fu_126_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        data_address0 = tmp_4_fu_116_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        data_address0 = tmp_1_fu_99_p1;
    end else begin
        data_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | ((tmp_2_reg_161 == 1'd0) & (1'd1 == tmp_5_fu_121_p2) & (1'b1 == ap_CS_fsm_state5)) | ((1'b1 == ap_CS_fsm_state5) & ((1'd0 == tmp_5_fu_121_p2) | (1'd1 == tmp_2_reg_161))))) begin
        data_ce0 = 1'b1;
    end else begin
        data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if (((1'd0 == tmp_5_fu_121_p2) | (1'd1 == tmp_2_reg_161))) begin
            data_d0 = v_reg_155;
        end else if (((tmp_2_reg_161 == 1'd0) & (1'd1 == tmp_5_fu_121_p2))) begin
            data_d0 = data_q0;
        end else begin
            data_d0 = 'bx;
        end
    end else begin
        data_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_2_reg_161 == 1'd0) & (1'd1 == tmp_5_fu_121_p2) & (1'b1 == ap_CS_fsm_state5)) | ((1'b1 == ap_CS_fsm_state5) & ((1'd0 == tmp_5_fu_121_p2) | (1'd1 == tmp_2_reg_161))))) begin
        data_we0 = 1'b1;
    end else begin
        data_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_fu_94_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & ((1'd0 == tmp_5_fu_121_p2) | (1'd1 == tmp_2_reg_161)))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign i_fu_136_p2 = (j_reg_67 + 31'd1);

assign j_1_fu_110_p2 = ($signed(j1_reg_79) + $signed(31'd2147483647));

assign j_cast_fu_90_p1 = j_reg_67;

assign tmp_1_fu_99_p1 = j_reg_67;

assign tmp_2_fu_104_p2 = ((j1_reg_79 == 31'd0) ? 1'b1 : 1'b0);

assign tmp_4_fu_116_p1 = j_1_fu_110_p2;

assign tmp_5_fu_121_p2 = (($signed(data_q0) > $signed(v_reg_155)) ? 1'b1 : 1'b0);

assign tmp_6_fu_131_p1 = j1_reg_79;

assign tmp_8_fu_126_p1 = j1_reg_79;

assign tmp_fu_94_p2 = (($signed(j_cast_fu_90_p1) < $signed(len)) ? 1'b1 : 1'b0);

endmodule //triInsertion
