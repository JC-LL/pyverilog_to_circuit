// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.3
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="arf_obf,hls_ip_2017_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100tcsg324-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.230000,HLS_SYN_LAT=9,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=75,HLS_SYN_FF=1072,HLS_SYN_LUT=2129}" *)

module arf_obf (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        i1,
        i2,
        i3,
        i4,
        i5,
        i6,
        o1,
        o1_ap_vld,
        o2,
        o2_ap_vld,
        o3,
        o3_ap_vld,
        o4,
        o4_ap_vld,
        G1,
        G2,
        G3,
        G4,
        GG1,
        GG2,
        key1,
        key2,
        key3,
        key4,
        key5
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] i1;
input  [31:0] i2;
input  [31:0] i3;
input  [31:0] i4;
input  [31:0] i5;
input  [31:0] i6;
output  [31:0] o1;
output   o1_ap_vld;
output  [31:0] o2;
output   o2_ap_vld;
output  [31:0] o3;
output   o3_ap_vld;
output  [31:0] o4;
output   o4_ap_vld;
input  [31:0] G1;
input  [31:0] G2;
input  [31:0] G3;
input  [31:0] G4;
input  [31:0] GG1;
input  [31:0] GG2;
input  [31:0] key1;
input  [31:0] key2;
input  [31:0] key3;
input  [31:0] key4;
input  [31:0] key5;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] o1;
reg o1_ap_vld;
reg o2_ap_vld;
reg[31:0] o3;
reg o3_ap_vld;
reg o4_ap_vld;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] tmp_fu_202_p2;
reg   [0:0] tmp_reg_569;
wire    ap_CS_fsm_state2;
wire   [31:0] op6_2_fu_268_p3;
reg   [31:0] op6_2_reg_601;
wire   [31:0] op5_2_fu_275_p3;
reg   [31:0] op5_2_reg_607;
wire  signed [31:0] op3_2_fu_282_p3;
reg  signed [31:0] op3_2_reg_613;
wire  signed [31:0] op2_2_fu_289_p3;
reg  signed [31:0] op2_2_reg_619;
wire   [31:0] op8_2_fu_296_p3;
reg   [31:0] op8_2_reg_625;
wire  signed [31:0] op1_fu_303_p2;
reg  signed [31:0] op1_reg_631;
wire  signed [31:0] op4_fu_309_p2;
reg  signed [31:0] op4_reg_637;
wire   [31:0] op7_fu_315_p2;
reg   [31:0] op7_reg_643;
wire   [0:0] tmp_s_fu_321_p2;
reg   [0:0] tmp_s_reg_649;
wire    ap_CS_fsm_state3;
wire   [31:0] op9_2_fu_359_p3;
reg   [31:0] op9_2_reg_672;
wire   [31:0] op10_2_fu_366_p3;
reg   [31:0] op10_2_reg_678;
wire  signed [31:0] op11_2_fu_373_p3;
reg  signed [31:0] op11_2_reg_684;
wire   [0:0] tmp_1_fu_387_p2;
reg   [0:0] tmp_1_reg_689;
wire   [31:0] op14_1_fu_393_p2;
reg   [31:0] op14_1_reg_693;
wire   [31:0] op13_fu_399_p2;
wire   [31:0] op14_fu_406_p2;
wire   [31:0] op13_1_fu_412_p2;
wire    ap_CS_fsm_state4;
wire   [0:0] tmp_2_fu_417_p2;
reg   [0:0] tmp_2_reg_713;
wire   [0:0] tmp_3_fu_422_p2;
reg   [0:0] tmp_3_reg_720;
wire   [31:0] op17_fu_427_p2;
reg   [31:0] op17_reg_724;
wire    ap_CS_fsm_state5;
wire  signed [31:0] op18_fu_432_p2;
reg  signed [31:0] op18_reg_729;
wire  signed [31:0] tmp2_fu_437_p2;
reg  signed [31:0] tmp2_reg_735;
wire  signed [31:0] tmp3_fu_441_p2;
reg  signed [31:0] tmp3_reg_740;
wire   [31:0] op15_fu_447_p2;
reg   [31:0] op15_reg_745;
wire  signed [31:0] op17_1_fu_452_p2;
reg  signed [31:0] op17_1_reg_750;
wire  signed [31:0] op20_fu_461_p2;
reg  signed [31:0] op20_reg_755;
wire    ap_CS_fsm_state6;
wire   [31:0] op20_1_fu_475_p2;
reg   [31:0] op20_1_reg_761;
wire  signed [31:0] op19_2_fu_479_p3;
reg  signed [31:0] op19_2_reg_767;
wire  signed [31:0] op21_2_fu_499_p3;
reg  signed [31:0] op21_2_reg_775;
wire    ap_CS_fsm_state7;
wire  signed [31:0] op22_1_fu_506_p2;
reg  signed [31:0] op22_1_reg_781;
wire  signed [31:0] op24_1_fu_510_p2;
reg  signed [31:0] op24_1_reg_786;
wire   [31:0] op22_fu_515_p2;
reg   [31:0] op22_reg_791;
wire   [31:0] op23_fu_519_p2;
reg   [31:0] op23_reg_796;
wire   [31:0] op24_fu_523_p2;
reg   [31:0] op24_reg_801;
wire   [31:0] op25_fu_528_p2;
reg   [31:0] op25_reg_806;
wire    ap_CS_fsm_state8;
wire  signed [31:0] tmp7_fu_532_p2;
reg  signed [31:0] tmp7_reg_811;
wire   [31:0] op26_fu_536_p2;
reg   [31:0] op26_reg_816;
wire    ap_CS_fsm_state9;
wire   [31:0] op28_fu_564_p2;
wire    ap_CS_fsm_state11;
reg  signed [31:0] storemerge_reg_172;
reg  signed [31:0] op_reg_182;
wire   [31:0] op28_1_fu_545_p2;
reg   [31:0] ap_phi_mux_storemerge1_phi_fu_195_p4;
reg   [31:0] storemerge1_reg_192;
wire    ap_CS_fsm_state10;
wire   [31:0] op27_1_fu_540_p2;
wire   [31:0] op27_fu_554_p2;
wire  signed [31:0] op2_fu_208_p0;
wire  signed [31:0] op2_fu_208_p1;
wire  signed [31:0] op3_fu_214_p0;
wire  signed [31:0] op3_fu_214_p1;
wire  signed [31:0] op5_fu_220_p0;
wire  signed [31:0] op5_fu_220_p1;
wire  signed [31:0] op6_fu_226_p0;
wire  signed [31:0] op6_fu_226_p1;
wire  signed [31:0] op8_fu_232_p0;
wire  signed [31:0] op8_fu_232_p1;
wire  signed [31:0] op2_1_fu_238_p0;
wire  signed [31:0] op2_1_fu_238_p1;
wire  signed [31:0] op3_1_fu_244_p0;
wire  signed [31:0] op3_1_fu_244_p1;
wire  signed [31:0] op5_1_fu_250_p0;
wire  signed [31:0] op5_1_fu_250_p1;
wire  signed [31:0] op6_1_fu_256_p0;
wire  signed [31:0] op6_1_fu_256_p1;
wire  signed [31:0] op8_1_fu_262_p0;
wire  signed [31:0] op8_1_fu_262_p1;
wire   [31:0] op6_fu_226_p2;
wire   [31:0] op6_1_fu_256_p2;
wire   [31:0] op5_fu_220_p2;
wire   [31:0] op5_1_fu_250_p2;
wire   [31:0] op3_fu_214_p2;
wire   [31:0] op3_1_fu_244_p2;
wire   [31:0] op2_fu_208_p2;
wire   [31:0] op2_1_fu_238_p2;
wire   [31:0] op8_fu_232_p2;
wire   [31:0] op8_1_fu_262_p2;
wire  signed [31:0] op1_fu_303_p0;
wire  signed [31:0] op1_fu_303_p1;
wire  signed [31:0] op4_fu_309_p0;
wire  signed [31:0] op4_fu_309_p1;
wire  signed [31:0] op7_fu_315_p0;
wire  signed [31:0] op7_fu_315_p1;
wire   [31:0] op9_fu_327_p2;
wire   [31:0] op9_1_fu_343_p2;
wire   [31:0] op10_fu_331_p2;
wire   [31:0] op10_1_fu_347_p2;
wire   [31:0] op11_fu_335_p2;
wire   [31:0] op11_1_fu_351_p2;
wire   [31:0] op12_fu_339_p2;
wire   [31:0] op12_1_fu_355_p2;
wire   [31:0] op12_2_fu_380_p3;
wire  signed [31:0] op13_fu_399_p1;
wire  signed [31:0] op13_1_fu_412_p1;
wire  signed [31:0] op17_fu_427_p1;
wire  signed [31:0] op18_fu_432_p1;
wire  signed [31:0] tmp2_fu_437_p0;
wire  signed [31:0] tmp2_fu_437_p1;
wire  signed [31:0] op15_fu_447_p1;
wire  signed [31:0] op17_1_fu_452_p1;
wire  signed [31:0] tmp4_fu_465_p1;
wire   [31:0] tmp4_fu_465_p2;
wire   [31:0] op19_fu_457_p2;
wire   [31:0] op19_1_fu_469_p2;
wire  signed [31:0] op21_fu_486_p1;
wire  signed [31:0] op21_1_fu_490_p1;
wire   [31:0] op21_fu_486_p2;
wire   [31:0] op21_1_fu_490_p2;
wire  signed [31:0] op22_1_fu_506_p1;
wire  signed [31:0] op20_2_fu_494_p3;
wire  signed [31:0] op24_1_fu_510_p1;
wire  signed [31:0] op22_fu_515_p1;
wire  signed [31:0] op23_fu_519_p1;
wire  signed [31:0] op24_fu_523_p1;
wire  signed [31:0] tmp7_fu_532_p1;
wire   [31:0] tmp5_fu_550_p2;
wire   [31:0] tmp6_fu_560_p2;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_1_fu_387_p2 == 1'd1))) begin
        op_reg_182 <= op13_fu_399_p2;
    end else if (((1'b1 == ap_CS_fsm_state4) & (tmp_1_reg_689 == 1'd0))) begin
        op_reg_182 <= op13_1_fu_412_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        storemerge1_reg_192 <= op28_fu_564_p2;
    end else if (((1'b1 == ap_CS_fsm_state10) & (1'd0 == tmp_3_reg_720))) begin
        storemerge1_reg_192 <= op28_1_fu_545_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_1_fu_387_p2 == 1'd1))) begin
        storemerge_reg_172 <= op14_fu_406_p2;
    end else if (((1'b1 == ap_CS_fsm_state4) & (tmp_1_reg_689 == 1'd0))) begin
        storemerge_reg_172 <= op14_1_reg_693;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        op10_2_reg_678 <= op10_2_fu_366_p3;
        op11_2_reg_684 <= op11_2_fu_373_p3;
        op9_2_reg_672 <= op9_2_fu_359_p3;
        tmp_1_reg_689 <= tmp_1_fu_387_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_1_fu_387_p2 == 1'd0))) begin
        op14_1_reg_693 <= op14_1_fu_393_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == tmp_2_reg_713))) begin
        op15_reg_745 <= op15_fu_447_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        op17_1_reg_750 <= op17_1_fu_452_p2;
        op17_reg_724 <= op17_fu_427_p2;
        op18_reg_729 <= op18_fu_432_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        op19_2_reg_767 <= op19_2_fu_479_p3;
        op20_1_reg_761 <= op20_1_fu_475_p2;
        op20_reg_755 <= op20_fu_461_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        op1_reg_631 <= op1_fu_303_p2;
        op2_2_reg_619 <= op2_2_fu_289_p3;
        op3_2_reg_613 <= op3_2_fu_282_p3;
        op4_reg_637 <= op4_fu_309_p2;
        op5_2_reg_607 <= op5_2_fu_275_p3;
        op6_2_reg_601 <= op6_2_fu_268_p3;
        op7_reg_643 <= op7_fu_315_p2;
        op8_2_reg_625 <= op8_2_fu_296_p3;
        tmp_s_reg_649 <= tmp_s_fu_321_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        op21_2_reg_775 <= op21_2_fu_499_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == tmp_3_reg_720))) begin
        op22_1_reg_781 <= op22_1_fu_506_p2;
        op24_1_reg_786 <= op24_1_fu_510_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == tmp_3_reg_720))) begin
        op22_reg_791 <= op22_fu_515_p2;
        op23_reg_796 <= op23_fu_519_p2;
        op24_reg_801 <= op24_fu_523_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        op25_reg_806 <= op25_fu_528_p2;
        tmp7_reg_811 <= tmp7_fu_532_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        op26_reg_816 <= op26_fu_536_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == tmp_2_reg_713))) begin
        tmp2_reg_735 <= tmp2_fu_437_p2;
        tmp3_reg_740 <= tmp3_fu_441_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_2_reg_713 <= tmp_2_fu_417_p2;
        tmp_3_reg_720 <= tmp_3_fu_422_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tmp_reg_569 <= tmp_fu_202_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (1'd0 == tmp_3_reg_720))) begin
        ap_phi_mux_storemerge1_phi_fu_195_p4 = op28_1_fu_545_p2;
    end else begin
        ap_phi_mux_storemerge1_phi_fu_195_p4 = storemerge1_reg_192;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (tmp_1_reg_689 == 1'd0))) begin
        o1 = op13_1_fu_412_p2;
    end else if (((1'b1 == ap_CS_fsm_state3) & (tmp_1_fu_387_p2 == 1'd1))) begin
        o1 = op13_fu_399_p2;
    end else begin
        o1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (tmp_1_fu_387_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state4) & (tmp_1_reg_689 == 1'd0)))) begin
        o1_ap_vld = 1'b1;
    end else begin
        o1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        o2_ap_vld = 1'b1;
    end else begin
        o2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        o3 = op27_fu_554_p2;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        o3 = op27_1_fu_540_p2;
    end else begin
        o3 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9))) begin
        o3_ap_vld = 1'b1;
    end else begin
        o3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        o4_ap_vld = 1'b1;
    end else begin
        o4_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == tmp_3_reg_720))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign o2 = storemerge_reg_172;

assign o4 = ap_phi_mux_storemerge1_phi_fu_195_p4;

assign op10_1_fu_347_p2 = ($signed(op3_2_reg_613) * $signed(op4_reg_637));

assign op10_2_fu_366_p3 = ((tmp_s_reg_649[0:0] === 1'b1) ? op10_fu_331_p2 : op10_1_fu_347_p2);

assign op10_fu_331_p2 = ($signed(op3_2_reg_613) + $signed(op4_reg_637));

assign op11_1_fu_351_p2 = (op5_2_reg_607 - op6_2_reg_601);

assign op11_2_fu_373_p3 = ((tmp_s_reg_649[0:0] === 1'b1) ? op11_fu_335_p2 : op11_1_fu_351_p2);

assign op11_fu_335_p2 = (op5_2_reg_607 + op6_2_reg_601);

assign op12_1_fu_355_p2 = (op7_reg_643 - op8_2_reg_625);

assign op12_2_fu_380_p3 = ((tmp_s_reg_649[0:0] === 1'b1) ? op12_fu_339_p2 : op12_1_fu_355_p2);

assign op12_fu_339_p2 = (op8_2_reg_625 + op7_reg_643);

assign op13_1_fu_412_p1 = i5;

assign op13_1_fu_412_p2 = ($signed(op11_2_reg_684) * $signed(op13_1_fu_412_p1));

assign op13_fu_399_p1 = i5;

assign op13_fu_399_p2 = ($signed(op11_2_fu_373_p3) + $signed(op13_fu_399_p1));

assign op14_1_fu_393_p2 = (i6 - op12_2_fu_380_p3);

assign op14_fu_406_p2 = (op12_2_fu_380_p3 + i6);

assign op15_fu_447_p1 = G1;

assign op15_fu_447_p2 = ($signed(storemerge_reg_172) * $signed(op15_fu_447_p1));

assign op17_1_fu_452_p1 = G1;

assign op17_1_fu_452_p2 = ($signed(op_reg_182) - $signed(op17_1_fu_452_p1));

assign op17_fu_427_p1 = G1;

assign op17_fu_427_p2 = ($signed(op_reg_182) * $signed(op17_fu_427_p1));

assign op18_fu_432_p1 = G2;

assign op18_fu_432_p2 = ($signed(storemerge_reg_172) * $signed(op18_fu_432_p1));

assign op19_1_fu_469_p2 = ($signed(tmp4_fu_465_p2) + $signed(op_reg_182));

assign op19_2_fu_479_p3 = ((tmp_2_reg_713[0:0] === 1'b1) ? op19_fu_457_p2 : op19_1_fu_469_p2);

assign op19_fu_457_p2 = ($signed(tmp3_reg_740) * $signed(tmp2_reg_735));

assign op1_fu_303_p0 = GG1;

assign op1_fu_303_p1 = i1;

assign op1_fu_303_p2 = ($signed(op1_fu_303_p0) * $signed(op1_fu_303_p1));

assign op20_1_fu_475_p2 = ($signed(op18_reg_729) * $signed(op17_1_reg_750));

assign op20_2_fu_494_p3 = ((tmp_2_reg_713[0:0] === 1'b1) ? op20_reg_755 : op20_1_reg_761);

assign op20_fu_461_p2 = ($signed(op17_reg_724) + $signed(op18_reg_729));

assign op21_1_fu_490_p1 = G1;

assign op21_1_fu_490_p2 = ($signed(op20_1_reg_761) + $signed(op21_1_fu_490_p1));

assign op21_2_fu_499_p3 = ((tmp_2_reg_713[0:0] === 1'b1) ? op21_fu_486_p2 : op21_1_fu_490_p2);

assign op21_fu_486_p1 = G1;

assign op21_fu_486_p2 = ($signed(op20_reg_755) * $signed(op21_fu_486_p1));

assign op22_1_fu_506_p1 = G2;

assign op22_1_fu_506_p2 = ($signed(op19_2_reg_767) + $signed(op22_1_fu_506_p1));

assign op22_fu_515_p1 = G2;

assign op22_fu_515_p2 = ($signed(op19_2_reg_767) * $signed(op22_fu_515_p1));

assign op23_fu_519_p1 = G1;

assign op23_fu_519_p2 = ($signed(op19_2_reg_767) * $signed(op23_fu_519_p1));

assign op24_1_fu_510_p1 = G2;

assign op24_1_fu_510_p2 = ($signed(op20_2_fu_494_p3) - $signed(op24_1_fu_510_p1));

assign op24_fu_523_p1 = G2;

assign op24_fu_523_p2 = ($signed(op20_2_fu_494_p3) * $signed(op24_fu_523_p1));

assign op25_fu_528_p2 = ($signed(op21_2_reg_775) * $signed(op22_1_reg_781));

assign op26_fu_536_p2 = ($signed(tmp7_reg_811) * $signed(op19_2_reg_767));

assign op27_1_fu_540_p2 = (op9_2_reg_672 - op25_reg_806);

assign op27_fu_554_p2 = (tmp5_fu_550_p2 + op22_reg_791);

assign op28_1_fu_545_p2 = (op10_2_reg_678 - op26_reg_816);

assign op28_fu_564_p2 = (tmp6_fu_560_p2 + op23_reg_796);

assign op2_1_fu_238_p0 = GG2;

assign op2_1_fu_238_p1 = i2;

assign op2_1_fu_238_p2 = ($signed(op2_1_fu_238_p0) + $signed(op2_1_fu_238_p1));

assign op2_2_fu_289_p3 = ((tmp_reg_569[0:0] === 1'b1) ? op2_fu_208_p2 : op2_1_fu_238_p2);

assign op2_fu_208_p0 = GG2;

assign op2_fu_208_p1 = i2;

assign op2_fu_208_p2 = ($signed(op2_fu_208_p0) * $signed(op2_fu_208_p1));

assign op3_1_fu_244_p0 = G1;

assign op3_1_fu_244_p1 = i2;

assign op3_1_fu_244_p2 = ($signed(op3_1_fu_244_p0) - $signed(op3_1_fu_244_p1));

assign op3_2_fu_282_p3 = ((tmp_reg_569[0:0] === 1'b1) ? op3_fu_214_p2 : op3_1_fu_244_p2);

assign op3_fu_214_p0 = G1;

assign op3_fu_214_p1 = i2;

assign op3_fu_214_p2 = ($signed(op3_fu_214_p0) * $signed(op3_fu_214_p1));

assign op4_fu_309_p0 = G2;

assign op4_fu_309_p1 = i1;

assign op4_fu_309_p2 = ($signed(op4_fu_309_p0) * $signed(op4_fu_309_p1));

assign op5_1_fu_250_p0 = G1;

assign op5_1_fu_250_p1 = i3;

assign op5_1_fu_250_p2 = ($signed(op5_1_fu_250_p0) + $signed(op5_1_fu_250_p1));

assign op5_2_fu_275_p3 = ((tmp_reg_569[0:0] === 1'b1) ? op5_fu_220_p2 : op5_1_fu_250_p2);

assign op5_fu_220_p0 = G1;

assign op5_fu_220_p1 = i3;

assign op5_fu_220_p2 = ($signed(op5_fu_220_p0) * $signed(op5_fu_220_p1));

assign op6_1_fu_256_p0 = G2;

assign op6_1_fu_256_p1 = i4;

assign op6_1_fu_256_p2 = ($signed(op6_1_fu_256_p0) - $signed(op6_1_fu_256_p1));

assign op6_2_fu_268_p3 = ((tmp_reg_569[0:0] === 1'b1) ? op6_fu_226_p2 : op6_1_fu_256_p2);

assign op6_fu_226_p0 = G2;

assign op6_fu_226_p1 = i4;

assign op6_fu_226_p2 = ($signed(op6_fu_226_p0) * $signed(op6_fu_226_p1));

assign op7_fu_315_p0 = G1;

assign op7_fu_315_p1 = i4;

assign op7_fu_315_p2 = ($signed(op7_fu_315_p0) * $signed(op7_fu_315_p1));

assign op8_1_fu_262_p0 = G2;

assign op8_1_fu_262_p1 = i3;

assign op8_1_fu_262_p2 = ($signed(op8_1_fu_262_p0) + $signed(op8_1_fu_262_p1));

assign op8_2_fu_296_p3 = ((tmp_reg_569[0:0] === 1'b1) ? op8_fu_232_p2 : op8_1_fu_262_p2);

assign op8_fu_232_p0 = G2;

assign op8_fu_232_p1 = i3;

assign op8_fu_232_p2 = ($signed(op8_fu_232_p0) * $signed(op8_fu_232_p1));

assign op9_1_fu_343_p2 = ($signed(op2_2_reg_619) * $signed(op1_reg_631));

assign op9_2_fu_359_p3 = ((tmp_s_reg_649[0:0] === 1'b1) ? op9_fu_327_p2 : op9_1_fu_343_p2);

assign op9_fu_327_p2 = ($signed(op2_2_reg_619) + $signed(op1_reg_631));

assign tmp2_fu_437_p0 = G2;

assign tmp2_fu_437_p1 = G1;

assign tmp2_fu_437_p2 = ($signed(tmp2_fu_437_p0) * $signed(tmp2_fu_437_p1));

assign tmp3_fu_441_p2 = ($signed(storemerge_reg_172) * $signed(op_reg_182));

assign tmp4_fu_465_p1 = G2;

assign tmp4_fu_465_p2 = ($signed(op15_reg_745) + $signed(tmp4_fu_465_p1));

assign tmp5_fu_550_p2 = ($signed(op9_2_reg_672) + $signed(op21_2_reg_775));

assign tmp6_fu_560_p2 = (op10_2_reg_678 + op24_reg_801);

assign tmp7_fu_532_p1 = G1;

assign tmp7_fu_532_p2 = ($signed(op24_1_reg_786) * $signed(tmp7_fu_532_p1));

assign tmp_1_fu_387_p2 = ((key3 == 32'd1) ? 1'b1 : 1'b0);

assign tmp_2_fu_417_p2 = ((key4 == 32'd1) ? 1'b1 : 1'b0);

assign tmp_3_fu_422_p2 = ((key5 == 32'd1) ? 1'b1 : 1'b0);

assign tmp_fu_202_p2 = ((key1 == 32'd1) ? 1'b1 : 1'b0);

assign tmp_s_fu_321_p2 = ((key2 == 32'd1) ? 1'b1 : 1'b0);

endmodule //arf_obf
